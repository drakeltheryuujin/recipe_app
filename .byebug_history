exit
@shopping_list_uniq.line_items.first.name
@shopping_list_uniq.line_items
@shopping_list_uniq
@shopping_list_distinct
exit
self.class.joins(:ingredients).group('ingredients.name').count('ingredients.name').keys
self.class.joins(:ingredients).group('ingredients.name').count('ingredients.name')
self.class.joins(:ingredients).group('ingredients.name')
self.ingredients.group('ingredients.name')
singles.length
singles
exit
singles
singles << ing
names.include? ing.name
ing.name
ing
exit
params
exit
session[:user_id]
sessions[:user_id]
params
exit
params
exit
params
exit
self.line_items.find_by(ingredient_id: item)
self.line_items
self.line_items.delete(ingredient_id: item)
self.line_items
item
exit
ingredients
exit
self.class.joins(:ingredients).where(user_id: self.user.id).group('ingredients.name').count('ingredients.name')
ingredients
exit
self.ingredients.destroy(item)
self.line_items.destroy(item)
self.line_items
item
exit
!item.empty?
!!item.empty?
item.empty?
item
continue
item
exit
end
params[:shopping_list][:ingredients]
params[:shopping_list]
params
exit
errors
params.errors
params
params[:shopping_list][:ingredients]
exit
params
params[:shopping_list][:ingredients]
exit
params[:shopping_list][:ingredients]
params[:shopping_list][:ingredients][:""]
params[:shopping_list][:ingredients]
params[:shopping_list]
params
exit
params[:shopping_list]
params
exit
b
f
b
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params[:shopping_list]
params[:ingredients_attributes]
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
exit
params
continue
self.ingredients.exists?(name: "raddish")
self.ingredients.exists?(name: "vinegar")
self.ingredients
params
continue
self.ingredients
self
params
continue
list.ingredients
list = ShoppingList.find(params[:id])
continue
ShoppingList.find(params[:id])
params
exit
params[:shopping_list]exit
params[:shopping_list]
params
@shopping_list
exit
params
@shopping_list.ingredients
@shopping_list
continue
params
exit
self.class.joins(:ingredients).where(user_id: self.user.id).group('ingredients.name').count('ingredients.name').to_a.sort
self.class.joins(:ingredients).where(user_id: self.user.id).group('ingredients.name').count('ingredients.name').to_a
self.class.joins(:ingredients).where(user_id: self.user.id).group('ingredients.name').count('ingredients.name').sort
self.class.joins(:ingredients).where(user_id: self.user.id).group('ingredients.name').count('ingredients.name')
self.class.joins(:ingredients).where(user_id: self.user.id).group('ingredients.name').count('ingredients.name').class
self.class.joins(:ingredients).where(user_id: self.user.id).group('ingredients.name').count('ingredients.name')
self.class.joins(:ingredients).where(user_id: self.user.id).group('ingredients.name').count('ingredients.name').sort
self.class.joins(:ingredients).where(user_id: self.user.id).group('ingredients.name').count('ingredients.name').sort.reverse
self.class.joins(:ingredients).where(user_id: self.user.id).group('ingredients.name').count('ingredients.name')
self.class.joins(:ingredients).where(user_id: self.user.id).group('ingredients.name').count('ingredients.name').sort
self.class.joins(:ingredients).where(user_id: self.user.id).count('ingredients.name')
self.class.joins(:ingredients).where(user_id: self.user.id).group('ingredients.name')
self.class.joins(:ingredients).where(user_id: self.user.id)
self.user.id
self.class.joins(:ingredients).where(user_id: self.user.id).group('ingredients.name').count('ingredients.name').sort.reverse
self.ingredients
self
exit
shopping_list.ingredients
shopping_list = ShoppingList.find(params[:id])
ShoppingList.find(params[:id])
params
exit
newlist
newlist = @shopping_list.ingredients.order('ingredient.name desc')
@shopping_list.ingredients.order('ingredient.name desc')
@shopping_list.ingredients.order_by('ingredient.name desc')
@shopping_list.ingredients
@shopping_list
exit
continue
ingredient
continue
ShoppingList.third.user_id
ShoppingList.all
ShoppingCart.all
Shopping_Cart.all
self.class.joins(:ingredients).where(user_id: self.id)
self.class.joins(:ingredients).where(user_id: self.id).group('ingredients.name').count('ingredients.name').sort.reverse
self.id
continue
exit
name[:name]
name
continue
name
params
id
name
continue
User.find(recipe.author.user_id)
recipe.author.user_id
recipe.author
recipe
continue
@user.reader.bookmarks
contninue
continue
@user.reader.bookmarks.class
@user.reader.bookmarks
@user.reader.class
@user.reader
@user
exit
Recipe.first.ingredients
Recipe.first
safe_food
exit
safe_food
exit
safe_food
exit
safe_food
exit
safe_food.uniq
safe_food
exit
safe_food
exit
safe_food.first
safe_food
exit
safe_food
exit
safe_food
continue
exit
xit
Recipe.find(73)
most_liked_id
exit
Bookmark.first
Recipe.second.bookmarks
Recipe.last.bookmarks
Recipe.first.bookmarks
Recipe.where(author_id: self.id).joins(:bookmarks).group('recipe.title')
Recipe.where(author_id: self.id).joins(:bookmarks).group('recipes.title')
Recipe.where(author_id: self.id).joins(:bookmarks).group('recipes.title').order('count(*) desc limit 1')
Recipe.where(author_id: self.id)
exit
author.recipes
author.most_liked
author
exit
Recipe.search(self.fav_cuisine)
exit
User.third.search_by_fav_cuisine
User.third
User.third.search_by_fav_cuisine
Recipe.last
Recipe.create(title: 'cuisine salad', author_id: 3)
Recipe.last
faves
favers
exit
faves
continue
faves
exit
Recipe.joins(:ingredients).where("ingredients.name = 'cucumber'")
